SHOW DATABASES // показывает базы данных 
CREATE DATABASE // создает базу данных
DROP DATABASE IF EXISTS "DB_NAME" // удаление БД ЕСЛИ существует.Можно без "IF EXISTS"
USE "DB_NAME" // выбирает базу данных.В скобочках имя БД
SHOW TABLES // показывает таблицы в выбранной БД
SHOW COLUMNS FROM "DB_NAME" // показывает конкретную таблицу по имени
RENAME TABLE "TABLE_NAME" TO "NEW_TABLE_NAME" // переименование таблицы
TRUNCATE TABLE "TABLE_NAME" // очистка таблицы
DROP TABLE "TABLE_NAME" // удаление таблицы


//----Создание таблицы 

CREATE TABLE user (                         // создаем таблицу по имени user
    id INT AUTO_INCREMENT PRIMARY KEY,      // первый столбец id, автоматически увеличивается с вводом данных(AUTO_INCREMENT) и является первичный ключ(PRIMARY KEY)
    name VARCHAR(255) NOT NULL              // второй столбец хранит строку и не может быть пустым(NOT NULL)
)

//----Типы данных // https://metanit.com/sql/mysql/2.3.php

CHAR: представляет строку фиксированной длины.
Длина хранимой строки указывается в скобках, например, CHAR(10) - строка из десяти символов. И если в таблицу в данный столбец сохраняется строка из 6 символов (то есть меньше установленной длины в 10 символов), то строка дополняется 4 пробелами и в итоге все равно будет занимать 10 символов
Тип CHAR может хранить до 255 байт.
VARCHAR: представляет строку переменной длины.
Длина хранимой строки также указыватся в скобках, например, VARCHAR(10). Однако в отличие от CHAR хранимая строка будет занимать именно столько места, сколько необходимо. Например, если определенная длина в 10 символов, но в столбец сохраняется строка в 6 символов, то хранимая строка так и будет занимать 6 символов плюс дополнительный байт, который хранит длину строки.
Всего тип VARCHAR может хранить до 65535 байт.

TINYTEXT: представляет текст длиной до 255 байт.
TEXT: представляет текст длиной до 65 КБ.
MEDIUMTEXT: представляет текст длиной до 16 МБ
LARGETEXT: представляет текст длиной до 4 ГБ

Числовые типы
TINYINT: представляет целые числа от -128 до 127, занимает 1 байт
BOOL: фактически не представляет отдельный тип, а является лишь псевдонимом для типа TINYINT(1) и может хранить два значения 0 и 1. Однако данный тип может также в качестве значения принимать встроенные константы TRUE (представляет число 1) и FALSE (предоставляет число 0).
Также имеет псевдоним BOOLEAN.
TINYINT UNSIGNED: представляет целые числа от 0 до 255, занимает 1 байт
SMALLINT: представляет целые числа от -32768 до 32767, занимает 2 байтa
SMALLINT UNSIGNED: представляет целые числа от 0 до 65535, занимает 2 байтa
MEDIUMINT: представляет целые числа от -8388608 до 8388607, занимает 3 байта
MEDIUMINT UNSIGNED: представляет целые числа от 0 до 16777215, занимает 3 байта
INT: представляет целые числа от -2147483648 до 2147483647, занимает 4 байта
INT UNSIGNED: представляет целые числа от 0 до 4294967295, занимает 4 байта
BIGINT: представляет целые числа от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807, занимает 8 байт
BIGINT UNSIGNED: представляет целые числа от 0 до 18 446 744 073 709 551 615, занимает 8 байт
DECIMAL: хранит числа с фиксированной точностью. Данный тип может принимать два параметра precision и scale: DECIMAL(precision, scale).
FLOAT: хранит дробные числа с плавающей точкой одинарной точности от -3.4028 * 1038 до 3.4028 * 1038, занимает 4 байта
Может принимать форму FLOAT(M,D), где M - общее количество цифр, а D - количество цифр после запятой.
DOUBLE: хранит дробные числа с плавающей точкой двойной точности от -1.7976 * 10308 до 1.7976 * 10308, занимает 8 байт. Также может принимать форму DOUBLE(M,D), где M - общее количество цифр, а D - количество цифр после запятой.
Данный тип также имеет псевдонимы REAL и DOUBLE PRECISION, которые можно использовать вместо DOUBLE.

Типы для работы с датой и временем
DATE: хранит даты с 1 января 1000 года до 31 деабря 9999 года (c "1000-01-01" до "9999-12-31"). По умолчанию для хранения используется формат yyyy-mm-dd. Занимает 3 байта.
TIME: хранит время от -838:59:59 до 838:59:59. По умолчанию для хранения времени применяется формат "hh:mm:ss". Занимает 3 байта.
DATETIME: объединяет время и дату, диапазон дат и времени - с 1 января 1000 года по 31 декабря 9999 года (с "1000-01-01 00:00:00" до "9999-12-31 23:59:59"). Для хранения по умолчанию используется формат "yyyy-mm-dd hh:mm:ss". Занимает 8 байт
TIMESTAMP: также хранит дату и время, но в другом диапазоне: от "1970-01-01 00:00:01" UTC до "2038-01-19 03:14:07" UTC. Занимает 4 байта
YEAR: хранит год в виде 4 цифр. Диапазон доступных значений от 1901 до 2155. Занимает 1 байт.

Составные типы
ENUM: хранит одно значение из списка допустимых значений. Занимает 1-2 байта
SET: может хранить несколько значений (до 64 значений) из некоторого списка допустимых значений. Занимает 1-8 байт.

Бинарные типы
TINYBLOB: хранит бинарные данные в виде строки длиной до 255 байт.
BLOB: хранит бинарные данные в виде строки длиной до 65 КБ.
MEDIUMBLOB: хранит бинарные данные в виде строки длиной до 16 МБ
LARGEBLOB: хранит бинарные данные в виде строки длиной до 4 ГБ

//----Атрибуты столбцов и таблиц

PRIMARY KEY // задает первичный ключ таблицы
AUTO_INCREMENT // aтрибут AUTO_INCREMENT позволяет указать, что значение столбца будет автоматически увеличиваться при добавлении новой строки
UNIQUE // aтрибут UNIQUE указывает, что столбец может хранить только уникальные значения
NULL // NOT NULL // указывает может ли столбец принимать значение NULL
DEFAULT // определяет значение по умолчанию для столбца ПРИМЕР // Age INT DEFAULT 18
CHECK // задает ограничение для диапазона значений, которые могут храниться в столбце ПРИМЕР // Age INT DEFAULT 18 CHECK(Age >0 AND Age < 100)
CONSTRAINT // можно задать имя для ограничений.Смысл установки имен ограничений заключается в том, что впоследствии через эти имена мы сможем управлять ограничениями - удалять или изменять 
ПРИМЕР:
CREATE TABLE Customers
(
    Id INT AUTO_INCREMENT,
    Age INT,
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL,
    Email VARCHAR(30),
    Phone VARCHAR(20) NOT NULL,
    CONSTRAINT customers_pk PRIMARY KEY(Id),
    CONSTRAINT customer_phone_uq UNIQUE(Phone),
    CONSTRAINT customer_age_chk CHECK(Age >0 AND Age<100)
);

//----Внешные ключи FOREIGN KEY
ПРИМЕР:
CREATE TABLE Customers
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Age INT, 
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL,
    Phone VARCHAR(20) NOT NULL UNIQUE
);
 
CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    FOREIGN KEY (CustomerId)  REFERENCES Customers (Id) // указывает, что CustomerId ссылается на столбец Id из таблицы Customers
);

// ---------
ON DELETE и ON UPDATE
ПРИМЕР:
CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date,
    FOREIGN KEY (CustomerId) REFERENCES Customers (Id) ON DELETE CASCADE
);

С помощью выражений ON DELETE и ON UPDATE можно установить действия, которые выполняются соответственно при удалении и изменении связанной строки из главной таблицы. В качестве действия могут использоваться следующие опции:
CASCADE: автоматически удаляет или изменяет строки из зависимой таблицы при удалении или изменении связанных строк в главной таблице.
SET NULL: при удалении или обновлении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение NULL. (В этом случае столбец внешнего ключа должен поддерживать установку NULL)
RESTRICT: отклоняет удаление или изменение строк в главной таблице при наличии связанных строк в зависимой таблице.
NO ACTION: то же самое, что и RESTRICT.
SET DEFAULT: при удалении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение по умолчанию, которое задается с помощью атрибуты DEFAULT. Несмотря на то, что данная опция в принципе доступна, однако движок InnoDB не поддерживает данное выражение.

//----изменение таблиц и столбцов

ALTER TABLE Customers
ADD Address VARCHAR(50) NULL;  // добавление столбца

ALTER TABLE Customers
DROP COLUMN Address;  // удаление столбца

ALTER TABLE Customers
ALTER COLUMN Age SET DEFAULT 22; // изменение значения по умолчанию

ALTER TABLE Customers
MODIFY COLUMN FirstName CHAR(100) NULL; // изменение типа столбца

//----Добавление и удаление внешнего ключа

CREATE TABLE Customers
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Age INT, 
    FirstName VARCHAR(20) NOT NULL,
    LastName VARCHAR(20) NOT NULL
);
CREATE TABLE Orders
(
    Id INT PRIMARY KEY AUTO_INCREMENT,
    CustomerId INT,
    CreatedAt Date
);

ALTER TABLE Orders
ADD CONSTRAINT orders_customers_fk 
FOREIGN KEY(CustomerId) REFERENCES Customers(Id) // Добавим ограничение внешнего ключа к столбцу CustomerId таблицы Orders

//Добавление и удаление первичного ключа
CREATE TABLE Products
(
    Id INT,
    Model VARCHAR(20)
);
 
ALTER TABLE Products
ADD PRIMARY KEY (Id); // добавление

ALTER TABLE Products
DROP PRIMARY KEY;    // удаление

//----Добавление данных в таблицу

CREATE DATABASE productsdb;           // создаем таблицу
USE productsdb;
CREATE TABLE Products
(
    Id INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(30) NOT NULL,
    Manufacturer VARCHAR(20) NOT NULL,
    ProductCount INT DEFAULT 0,
    Price DECIMAL NOT NULL
);


INSERT Products(ProductName, Manufacturer, ProductCount, Price) // добавляем данные
VALUES ('iPhone X', 'Apple', 5, 76000);

INSERT Products(ProductName, Manufacturer, Price, ProductCount) // за раз можно добавить множество строк
VALUES
('iPhone 8', 'Apple', 51000, 3),
('P20 Lite', 'Huawei', 34000, 4),
('Galaxy S8', 'Samsung', 46000, 2);


//----SELECT выборка данных

SELECT список_столбцов FROM имя_таблицы // синтаксис
SELECT * FROM имя_таблицы // * указывает на всю таблицу

//----WHERE условие

SELECT * FROM Products             // пример
WHERE Manufacturer = 'Samsung'; 

//----AND OR NOT логичесике операторы

//----UPDATE обновление данных

UPDATE имя_таблицы
SET столбец1 = значение1, столбец2 = значение2, ... столбецN = значениеN
[WHERE условие_обновления]

//----DELETE удаление данных

DELETE FROM имя_таблицы
[WHERE условие_удаления]


